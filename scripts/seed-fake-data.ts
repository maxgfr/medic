import bcrypt from "bcryptjs";
import { eq } from "drizzle-orm";
import { MEDICAL_SPECIALTIES } from "~/lib/constants";
import { db } from "~/server/db";
import {
	applications,
	cabinetProfiles,
	conversations,
	doctorProfiles,
	jobOffers,
	messages,
	specialties,
	users,
} from "~/server/db/schema";
import type {
	GeneralAvailability,
	MedicalSpecialty,
	PreferredLocation,
} from "~/types";

const FAKE_CABINETS = [
	{
		name: "Cabinet M√©dical Saint-Germain",
		address: "15 Rue de Rivoli, 75001 Paris",
		phone: "01 42 60 30 40",
		description:
			"Cabinet m√©dical moderne situ√© au c≈ìur de Paris, sp√©cialis√© en m√©decine g√©n√©rale et cardiologie.",
		specialties: ["MEDECINE_GENERALE", "CARDIOLOGIE"],
		latitude: 48.8566,
		longitude: 2.3522,
	},
	{
		name: "Centre M√©dical Lyon Presqu'√Æle",
		address: "22 Rue de la R√©publique, 69002 Lyon",
		phone: "04 78 42 15 20",
		description:
			"Centre m√©dical pluridisciplinaire avec plateau technique complet.",
		specialties: ["MEDECINE_GENERALE", "DERMATOLOGIE", "OPHTALMOLOGIE"],
		latitude: 45.764,
		longitude: 4.8357,
	},
	{
		name: "Cabinet Dr. Dubois",
		address: "8 Avenue Jean M√©decin, 06000 Nice",
		phone: "04 93 87 52 10",
		description: "Cabinet sp√©cialis√© en p√©diatrie et m√©decine familiale.",
		specialties: ["PEDIATRIE", "MEDECINE_GENERALE"],
		latitude: 43.7102,
		longitude: 7.262,
	},
	{
		name: "Polyclinique de Bordeaux",
		address: "45 Cours de l'Intendance, 33000 Bordeaux",
		phone: "05 56 00 22 30",
		description:
			"√âtablissement m√©dical regroupant plusieurs sp√©cialit√©s m√©dicales.",
		specialties: ["GYNECOLOGIE", "PSYCHIATRIE", "RADIOLOGIE"],
		latitude: 44.8378,
		longitude: -0.5792,
	},
	{
		name: "Centre de Sant√© Marseille",
		address: "12 La Canebi√®re, 13001 Marseille",
		phone: "04 91 13 45 60",
		description: "Centre de sant√© communautaire offrant des soins de qualit√©.",
		specialties: ["MEDECINE_GENERALE", "NEUROLOGIE"],
		latitude: 43.2965,
		longitude: 5.3698,
	},
];

const FAKE_DOCTORS = [
	{
		firstName: "Marie",
		lastName: "Dubois",
		specialties: ["MEDECINE_GENERALE", "CARDIOLOGIE"],
		experienceYears: 8,
		preferredLocations: [
			{ name: "Paris", travelRadius: 50, priority: 1 },
			{ name: "Lyon", travelRadius: 30, priority: 2 },
		],
		preferredRate: "120.00",
	},
	{
		firstName: "Pierre",
		lastName: "Martin",
		specialties: ["PEDIATRIE"],
		experienceYears: 12,
		preferredLocations: [
			{ name: "Nice", travelRadius: 25, priority: 1 },
			{ name: "Cannes", travelRadius: 40, priority: 2 },
		],
		preferredRate: "110.00",
	},
	{
		firstName: "Sophie",
		lastName: "Bernard",
		specialties: ["DERMATOLOGIE", "MEDECINE_GENERALE"],
		experienceYears: 6,
		preferredLocations: [
			{ name: "Lyon", travelRadius: 35, priority: 1 },
			{ name: "Villeurbanne", travelRadius: 20, priority: 2 },
		],
		preferredRate: "130.00",
	},
	{
		firstName: "Thomas",
		lastName: "Rousseau",
		specialties: ["NEUROLOGIE"],
		experienceYears: 15,
		preferredLocations: [
			{ name: "Bordeaux", travelRadius: 60, priority: 1 },
			{ name: "Toulouse", travelRadius: 50, priority: 2 },
		],
		preferredRate: "150.00",
	},
	{
		firstName: "Emma",
		lastName: "Leroy",
		specialties: ["GYNECOLOGIE", "MEDECINE_GENERALE"],
		experienceYears: 10,
		preferredLocations: [
			{ name: "Marseille", travelRadius: 40, priority: 1 },
			{ name: "Aix-en-Provence", travelRadius: 30, priority: 2 },
		],
		preferredRate: "125.00",
	},
	{
		firstName: "Lucas",
		lastName: "Moreau",
		specialties: ["OPHTALMOLOGIE"],
		experienceYears: 7,
		preferredLocations: [
			{ name: "Paris", travelRadius: 45, priority: 1 },
			{ name: "Boulogne-Billancourt", travelRadius: 25, priority: 2 },
		],
		preferredRate: "140.00",
	},
];

const JOB_TITLES = [
	"Remplacement m√©decin g√©n√©raliste urgent",
	"Rempla√ßant(e) p√©diatre - Cabinet moderne",
	"M√©decin dermatologue - Remplacement 3 mois",
	"Cardiologue rempla√ßant - Urgence",
	"Rempla√ßant(e) gyn√©cologue - Planning flexible",
	"Neurologue - Remplacement temporaire",
	"Ophtalmologue rempla√ßant(e) - Excellent cadre",
	"M√©decin g√©n√©raliste - Remplacement cong√©s",
];

const JOB_DESCRIPTIONS = [
	"Nous recherchons un m√©decin rempla√ßant dynamique pour rejoindre notre √©quipe. Cabinet bien √©quip√© avec secr√©tariat m√©dical.",
	"Remplacement dans un environnement m√©dical moderne avec plateau technique complet. Patient√®le fid√®le et vari√©e.",
	"Opportunit√© de remplacement dans un cabinet r√©put√©. Excellentes conditions de travail et r√©mun√©ration attractive.",
	"Remplacement urgent suite √† cong√© maladie. Cabinet bien organis√© avec √©quipe m√©dicale exp√©riment√©e.",
	"Poste de remplacement dans un centre m√©dical pluridisciplinaire. Possibilit√© de collaboration avec d'autres sp√©cialistes.",
];

type UserRecord = {
	id: string;
	name: string | null;
	email: string;
	password: string | null;
	role: "CABINET" | "DOCTOR";
	createdAt: Date;
	updatedAt: Date | null;
	emailVerified: Date | null;
	image: string | null;
};

type CabinetProfileRecord = typeof cabinetProfiles.$inferSelect;
type DoctorProfileRecord = typeof doctorProfiles.$inferSelect;

async function cleanDatabase() {
	console.log("üßπ Nettoyage de la base de donn√©es...");

	// Supprimer dans l'ordre inverse des d√©pendances
	await db.delete(messages);
	await db.delete(conversations);
	await db.delete(applications);
	await db.delete(jobOffers);
	await db.delete(cabinetProfiles);
	await db.delete(doctorProfiles);
	await db.delete(users);

	console.log("‚úÖ Base de donn√©es nettoy√©e");
}

async function createFakeUsers() {
	console.log("üë• Cr√©ation des utilisateurs fake...");

	const cabinetUsers: UserRecord[] = [];
	const doctorUsers: UserRecord[] = [];

	// Cr√©er les utilisateurs cabinets
	for (let i = 0; i < FAKE_CABINETS.length; i++) {
		const cabinet = FAKE_CABINETS[i];
		if (!cabinet) continue;

		const hashedPassword = await bcrypt.hash("password123", 10);

		const [user] = await db
			.insert(users)
			.values({
				name: cabinet.name,
				email: `cabinet${i + 1}@medicremplacement.com`,
				password: hashedPassword,
				role: "CABINET",
			})
			.returning();

		if (user) {
			cabinetUsers.push(user);
		}
	}

	// Cr√©er les utilisateurs m√©decins
	for (let i = 0; i < FAKE_DOCTORS.length; i++) {
		const doctor = FAKE_DOCTORS[i];
		if (!doctor) continue;

		const hashedPassword = await bcrypt.hash("password123", 10);

		const [user] = await db
			.insert(users)
			.values({
				name: `Dr. ${doctor.firstName} ${doctor.lastName}`,
				email: `${doctor.firstName.toLowerCase()}.${doctor.lastName.toLowerCase()}@medicremplacement.com`,
				password: hashedPassword,
				role: "DOCTOR",
			})
			.returning();

		if (user) {
			doctorUsers.push(user);
		}
	}

	console.log(
		`‚úÖ Cr√©√© ${cabinetUsers.length} utilisateurs cabinets et ${doctorUsers.length} utilisateurs m√©decins`,
	);
	return { cabinetUsers, doctorUsers };
}

async function createCabinetProfiles(cabinetUsers: UserRecord[]) {
	console.log("üè• Cr√©ation des profils cabinets...");

	const profiles: CabinetProfileRecord[] = [];

	for (let i = 0; i < cabinetUsers.length; i++) {
		const user = cabinetUsers[i];
		const cabinet = FAKE_CABINETS[i];
		if (!user || !cabinet) continue;

		const [profile] = await db
			.insert(cabinetProfiles)
			.values({
				userId: user.id,
				cabinetName: cabinet.name,
				address: cabinet.address,
				phone: cabinet.phone,
				description: cabinet.description,
				specialties: cabinet.specialties,
				latitude: cabinet.latitude,
				longitude: cabinet.longitude,
			})
			.returning();

		if (profile) {
			profiles.push(profile);
		}
	}

	console.log(`‚úÖ Cr√©√© ${profiles.length} profils cabinets`);
	return profiles;
}

async function createDoctorProfiles(doctorUsers: UserRecord[]) {
	console.log("üë®‚Äç‚öïÔ∏è Cr√©ation des profils m√©decins...");

	const profiles: DoctorProfileRecord[] = [];

	for (let i = 0; i < doctorUsers.length; i++) {
		const user = doctorUsers[i];
		const doctor = FAKE_DOCTORS[i];
		if (!user || !doctor) continue;

		const [profile] = await db
			.insert(doctorProfiles)
			.values({
				userId: user.id,
				firstName: doctor.firstName,
				lastName: doctor.lastName,
				specialties: doctor.specialties,
				experienceYears: doctor.experienceYears,
				preferredLocations: doctor.preferredLocations as PreferredLocation[],
				generalAvailability: {
					monday: true,
					tuesday: true,
					wednesday: true,
					thursday: true,
					friday: true,
					saturday: false,
					sunday: false,
				},
				specificAvailabilities: [],
				preferredRate: doctor.preferredRate,
			})
			.returning();

		if (profile) {
			profiles.push(profile);
		}
	}

	console.log(`‚úÖ Cr√©√© ${profiles.length} profils m√©decins`);
	return profiles;
}

async function createJobOffers(cabinetProfiles: CabinetProfileRecord[]) {
	console.log("üíº Cr√©ation des annonces d'emploi...");

	const createdJobOffers = [];
	const now = new Date();

	for (let i = 0; i < 15; i++) {
		const randomIndex = Math.floor(Math.random() * cabinetProfiles.length);
		const cabinet = cabinetProfiles[randomIndex];
		if (!cabinet) continue;

		const cabinetData = FAKE_CABINETS.find(
			(c) => c.name === cabinet.cabinetName,
		);
		if (!cabinetData) continue;

		// Dates al√©atoires dans le futur
		const startDate = new Date(
			now.getTime() + Math.random() * 60 * 24 * 60 * 60 * 1000,
		); // 0-60 jours
		const endDate = new Date(
			startDate.getTime() + (Math.random() * 30 + 1) * 24 * 60 * 60 * 1000,
		); // 1-30 jours de dur√©e

		// Sp√©cialit√© al√©atoire parmi celles du cabinet
		const specialtyIndex = Math.floor(
			Math.random() * cabinetData.specialties.length,
		);
		const specialty = cabinetData.specialties[specialtyIndex];
		if (!specialty) continue;

		const titleIndex = Math.floor(Math.random() * JOB_TITLES.length);
		const title = JOB_TITLES[titleIndex];
		if (!title) continue;

		const descriptionIndex = Math.floor(
			Math.random() * JOB_DESCRIPTIONS.length,
		);
		const description = JOB_DESCRIPTIONS[descriptionIndex];
		if (!description) continue;

		const locationParts = cabinetData.address.split(",");
		const location = locationParts[1]?.trim() || cabinetData.address;

		const [jobOffer] = await db
			.insert(jobOffers)
			.values({
				cabinetId: cabinet.id,
				title,
				specialty: specialty as MedicalSpecialty,
				location,
				latitude: cabinetData.latitude,
				longitude: cabinetData.longitude,
				startDate,
				endDate,
				retrocessionRate: (Math.random() * 30 + 50).toFixed(2), // 50-80%
				type:
					Math.random() > 0.7
						? "URGENT"
						: Math.random() > 0.5
							? "PLANNED"
							: "RECURRING",
				description,
				schedule: {
					morning: Math.random() > 0.3,
					afternoon: Math.random() > 0.2,
					evening: Math.random() > 0.8,
				},
				estimatedPatients: Math.floor(Math.random() * 30 + 10), // 10-40 patients
				equipment: ["St√©thoscope", "Tensiom√®tre", "ECG"].filter(
					() => Math.random() > 0.5,
				),
				housingProvided: Math.random() > 0.8,
				status: "PUBLISHED",
			})
			.returning();

		if (jobOffer) {
			createdJobOffers.push(jobOffer);
		}
	}

	console.log(`‚úÖ Cr√©√© ${createdJobOffers.length} annonces d'emploi`);
	return createdJobOffers;
}

async function createApplications(
	jobOffersList: (typeof jobOffers.$inferSelect)[],
	doctorProfiles: DoctorProfileRecord[],
) {
	console.log("üìã Cr√©ation des candidatures...");

	const createdApplications = [];

	// Cr√©er quelques candidatures al√©atoires
	for (let i = 0; i < 25; i++) {
		const jobOfferIndex = Math.floor(Math.random() * jobOffersList.length);
		const jobOffer = jobOffersList[jobOfferIndex];
		if (!jobOffer) continue;

		const doctorIndex = Math.floor(Math.random() * doctorProfiles.length);
		const doctor = doctorProfiles[doctorIndex];
		if (!doctor) continue;

		// V√©rifier que le m√©decin peut postuler (sp√©cialit√© compatible)
		const jobSpecialty = jobOffer.specialty;
		if (!doctor.specialties.includes(jobSpecialty)) {
			continue; // Skip si sp√©cialit√© incompatible
		}

		const motivationLetters = [
			"Je suis tr√®s int√©ress√©(e) par cette offre de remplacement. Mon exp√©rience et ma disponibilit√© correspondent parfaitement √† vos besoins.",
			"M√©decin exp√©riment√©, je souhaite rejoindre votre √©quipe pour ce remplacement. Je suis disponible aux dates mentionn√©es.",
			"Votre annonce a retenu toute mon attention. Je serais ravi(e) de contribuer √† la continuit√© des soins dans votre cabinet.",
			"Fort(e) de mes ann√©es d'exp√©rience, je pense pouvoir r√©pondre efficacement √† vos attentes pour ce remplacement.",
		];

		const letterIndex = Math.floor(Math.random() * motivationLetters.length);
		const motivationLetter = motivationLetters[letterIndex];
		if (!motivationLetter) continue;

		const statusOptions: Array<"SENT" | "VIEWED" | "ACCEPTED" | "REJECTED"> = [
			"SENT",
			"VIEWED",
			"ACCEPTED",
			"REJECTED",
		];
		const statusIndex = Math.floor(Math.random() * 4);
		const status = statusOptions[statusIndex];
		if (!status) continue;

		const [application] = await db
			.insert(applications)
			.values({
				jobOfferId: jobOffer.id,
				doctorId: doctor.id,
				motivationLetter,
				attachments: [],
				status,
			})
			.returning();

		if (application) {
			createdApplications.push(application);
		}
	}

	console.log(`‚úÖ Cr√©√© ${createdApplications.length} candidatures`);
	return createdApplications;
}

async function createConversationsAndMessages(
	jobOffersList: (typeof jobOffers.$inferSelect)[],
	cabinetProfiles: CabinetProfileRecord[],
	doctorProfiles: DoctorProfileRecord[],
	cabinetUsers: UserRecord[],
	doctorUsers: UserRecord[],
) {
	console.log("üí¨ Cr√©ation des conversations et messages...");

	const createdConversations = [];
	const createdMessages = [];

	// Messages types pour les conversations
	const cabinetMessages = [
		"Bonjour, votre profil correspond parfaitement √† notre offre de remplacement. √ätes-vous disponible pour en discuter ?",
		"Merci pour votre candidature. Nous serions ravis de vous accueillir dans notre cabinet. Pouvons-nous programmer un entretien ?",
		"Votre exp√©rience nous int√©resse beaucoup. Quand seriez-vous disponible pour commencer ?",
		"Nous avons quelques questions concernant votre candidature. Pouvez-vous nous donner plus de d√©tails sur votre exp√©rience ?",
		"Votre candidature a retenu notre attention. Nous souhaitons vous proposer ce remplacement.",
		"Bonjour, nous avons besoin de clarifications sur vos disponibilit√©s. Pouvez-vous nous en dire plus ?",
		"Excellent profil ! Nous aimerions vous rencontrer rapidement pour ce remplacement urgent.",
		"Votre lettre de motivation nous a convaincus. Quand pourriez-vous passer nous voir ?",
	];

	const doctorMessages = [
		"Bonjour, je suis tr√®s int√©ress√©(e) par votre offre. Pouvez-vous me donner plus de d√©tails sur le poste ?",
		"Merci pour votre message. Je suis effectivement disponible aux dates mentionn√©es.",
		"J'aimerais en savoir plus sur l'organisation du cabinet et l'√©quipe m√©dicale.",
		"Quelles sont les modalit√©s pratiques concernant le logement et les horaires ?",
		"Je suis disponible pour un entretien √† votre convenance. Quand vous conviendrait-il ?",
		"Pouvez-vous me pr√©ciser le nombre de patients estim√©s par jour ?",
		"Votre cabinet m'int√©resse beaucoup. Quand pouvons-nous nous rencontrer ?",
		"J'ai quelques questions sur les √©quipements disponibles et les proc√©dures.",
		"Merci pour cette opportunit√©. Je suis enthousiaste √† l'id√©e de rejoindre votre √©quipe.",
		"Quels sont les d√©lais pour une r√©ponse d√©finitive ?",
	];

	// Cr√©er environ 15 conversations
	for (let i = 0; i < 15; i++) {
		const jobOfferIndex = Math.floor(Math.random() * jobOffersList.length);
		const jobOffer = jobOffersList[jobOfferIndex];
		if (!jobOffer) continue;

		const doctorIndex = Math.floor(Math.random() * doctorProfiles.length);
		const doctor = doctorProfiles[doctorIndex];
		if (!doctor) continue;

		const cabinetIndex = Math.floor(Math.random() * cabinetProfiles.length);
		const cabinet = cabinetProfiles[cabinetIndex];
		if (!cabinet) continue;

		// Cr√©er la conversation
		const [conversation] = await db
			.insert(conversations)
			.values({
				jobOfferId: jobOffer.id,
				cabinetId: cabinet.id,
				doctorId: doctor.id,
				lastMessageAt: new Date(),
			})
			.returning();

		if (!conversation) continue;
		createdConversations.push(conversation);

		// Cr√©er 3-8 messages par conversation
		const messageCount = Math.floor(Math.random() * 6) + 3;
		let lastMessageTime = new Date(
			Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000,
		); // dans les 7 derniers jours

		for (let j = 0; j < messageCount; j++) {
			const isFromCabinet = j % 2 === 0; // Alterner entre cabinet et m√©decin
			const senderId = isFromCabinet
				? cabinetUsers.find((u) => u.name === cabinet.cabinetName)?.id
				: doctorUsers.find(
						(u) => u.name === `Dr. ${doctor.firstName} ${doctor.lastName}`,
					)?.id;

			if (!senderId) continue;

			const messageContent = isFromCabinet
				? cabinetMessages[Math.floor(Math.random() * cabinetMessages.length)]
				: doctorMessages[Math.floor(Math.random() * doctorMessages.length)];

			if (!messageContent) continue;

			// Ajouter quelques heures/jours entre les messages
			lastMessageTime = new Date(
				lastMessageTime.getTime() + Math.random() * 24 * 60 * 60 * 1000,
			);

			const [message] = await db
				.insert(messages)
				.values({
					conversationId: conversation.id,
					senderId,
					content: messageContent,
					isRead: Math.random() > 0.3, // 70% des messages sont lus
					createdAt: lastMessageTime,
				})
				.returning();

			if (message) {
				createdMessages.push(message);
			}
		}

		// Mettre √† jour la conversation avec le dernier message
		await db
			.update(conversations)
			.set({ lastMessageAt: lastMessageTime })
			.where(eq(conversations.id, conversation.id));
	}

	console.log(
		`‚úÖ Cr√©√© ${createdConversations.length} conversations et ${createdMessages.length} messages`,
	);
	return { createdConversations, createdMessages };
}

async function seedFakeData() {
	console.log("üå± D√©marrage du seeding avec des donn√©es fake...");

	try {
		// 0. Nettoyer la base de donn√©es
		await cleanDatabase();

		// 1. S'assurer que les sp√©cialit√©s sont pr√©sentes
		console.log("üìã V√©rification des sp√©cialit√©s m√©dicales...");
		for (const specialty of MEDICAL_SPECIALTIES) {
			await db
				.insert(specialties)
				.values({
					id: specialty.id,
					name: specialty.name,
					category: specialty.category,
				})
				.onConflictDoNothing();
		}

		// 2. Cr√©er les utilisateurs
		const { cabinetUsers, doctorUsers } = await createFakeUsers();

		// 3. Cr√©er les profils
		const cabinetProfiles = await createCabinetProfiles(cabinetUsers);
		const doctorProfiles = await createDoctorProfiles(doctorUsers);

		// 4. Cr√©er les annonces d'emploi
		const jobOffersList = await createJobOffers(cabinetProfiles);

		// 5. Cr√©er les candidatures
		await createApplications(jobOffersList, doctorProfiles);

		// 6. Cr√©er les conversations et messages
		await createConversationsAndMessages(
			jobOffersList,
			cabinetProfiles,
			doctorProfiles,
			cabinetUsers,
			doctorUsers,
		);

		console.log("üéâ Seeding des donn√©es fake termin√© avec succ√®s !");
		console.log("üìß Identifiants de connexion :");
		console.log(
			"   Cabinets : cabinet1@medicremplacement.com √† cabinet5@medicremplacement.com",
		);
		console.log("   M√©decins : prenom.nom@medicremplacement.com");
		console.log("   Mot de passe : password123");
	} catch (error) {
		console.error("‚ùå Erreur lors du seeding :", error);
		process.exit(1);
	}
}

// Ex√©cuter le script
seedFakeData()
	.then(() => {
		console.log("üèÅ Seeding termin√©");
		process.exit(0);
	})
	.catch((error) => {
		console.error("üí• Seeding √©chou√© :", error);
		process.exit(1);
	});
